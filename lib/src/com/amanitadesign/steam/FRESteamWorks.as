/*
 *  FRESteamWorks.as
 *  This file is part of FRESteamWorks.
 *
 *  Created by David ´Oldes´ Oliva on 3/29/12.
 *  Contributors: Ventero <http://github.com/Ventero>
 *  Copyright (c) 2012 Amanita Design. All rights reserved.
 *  Copyright (c) 2012-2013 Level Up Labs, LLC. All rights reserved.
 */

package com.amanitadesign.steam {
	import flash.display.DisplayObjectContainer;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.EventDispatcher;
	import flash.events.IEventDispatcher;
	import flash.events.StatusEvent;
	import flash.external.ExtensionContext;
	import flash.utils.ByteArray;
	import flash.utils.clearInterval;
	import flash.utils.setInterval;
	import flash.utils.setTimeout;

	public class FRESteamWorks extends EventDispatcher /* implements ISteamWorks */ {
		private var _ExtensionContext:ExtensionContext;
		private var _tm:int;

		// overlay workaround pixel stuff
		private var _redrawPixel:Sprite = null;
		private var _redrawContainer:DisplayObjectContainer = null;
		private var _color:uint;
		private var _alwaysVisible:Boolean;

		public var isReady:Boolean = false;

		public function FRESteamWorks(target:IEventDispatcher=null) {
			_ExtensionContext = ExtensionContext.createExtensionContext("com.amanitadesign.steam.FRESteamWorks", null);
			_ExtensionContext.addEventListener(StatusEvent.STATUS, handleStatusEvent);
			super(target);
		}

		private function handleStatusEvent(event:StatusEvent):void{
			var req_type:int = new int(event.code);
			var response:int = new int(event.level);
			var sEvent:SteamEvent = new SteamEvent(SteamEvent.STEAM_RESPONSE, req_type, response);

			// add or remove a small rotating sprite to the display list to force
			// a redraw when requested
			if (_redrawContainer && !_alwaysVisible &&
			    req_type == SteamConstants.RESPONSE_OnGameOverlayActivated) {
				if (response == SteamResults.OK && !_redrawPixel) {
					addRedrawPixel();
				} else if (response == SteamResults.Fail && _redrawPixel) {
					// wait a few seconds for the overlay to fully disappear
					// otherwise it might get stuck in the hiding animation
					setTimeout(removeRedrawPixel, 3000);
				}
			}

			dispatchEvent(sEvent);
		}

		private function addRedrawPixel():void {
			if (!_redrawContainer || _redrawPixel) return;
			_redrawPixel = new Sprite();
			_redrawPixel.width = 1;
			_redrawPixel.height = 1;
			// we need to draw something in the pixel for it to actually trigger
			// a re-render
			_redrawPixel.graphics.beginFill(_color);
			_redrawPixel.graphics.drawRect(0, 0, 1, 1);
			_redrawPixel.graphics.endFill();
			_redrawPixel.addEventListener(Event.ENTER_FRAME, redrawPixel);
			_redrawContainer.addChild(_redrawPixel);
		}

		private function removeRedrawPixel():void {
			if (!_redrawContainer || !_redrawPixel) return;
			_redrawPixel.removeEventListener(Event.ENTER_FRAME, redrawPixel);
			_redrawContainer.removeChild(_redrawPixel);
			_redrawPixel = null;
		}

		private function redrawPixel(e:Event = null):void {
			_redrawPixel.rotation += 1;
		}

		public function addOverlayWorkaround(container:DisplayObjectContainer,
			alwaysVisible:Boolean = false, color:uint = 0x000000):void {
			_redrawContainer = container;
			_alwaysVisible = alwaysVisible;
			_color = color;

			if (alwaysVisible) addRedrawPixel();
		}

		public function dispose():void {
			clearInterval(_tm);
			_ExtensionContext.removeEventListener(StatusEvent.STATUS, handleStatusEvent);
			_ExtensionContext.dispose();
		}

		public function init():Boolean {
			isReady = _ExtensionContext.call("AIRSteam_Init") as Boolean;
			if(isReady)	_tm = setInterval(runCallbacks, 100);
			return isReady;
		}

		/*
		 * The below code was autogenerated with generateAPI.rb
		 */

		// START GENERATED CODE
		/********************************/
		/* General Steamworks functions */
		/********************************/
		// manual implementation
		// public function init():Boolean

		public function runCallbacks():Boolean {
			return _ExtensionContext.call("AIRSteam_RunCallbacks") as Boolean;
		}

		public function getUserID():String {
			return _ExtensionContext.call("AIRSteam_GetUserID") as String;
		}

		public function getAppID():uint {
			return _ExtensionContext.call("AIRSteam_GetAppID") as uint;
		}

		public function getAvailableGameLanguages():String {
			return _ExtensionContext.call("AIRSteam_GetAvailableGameLanguages") as String;
		}

		public function getCurrentGameLanguage():String {
			return _ExtensionContext.call("AIRSteam_GetCurrentGameLanguage") as String;
		}

		public function getPersonaName():String {
			return _ExtensionContext.call("AIRSteam_GetPersonaName") as String;
		}

		public function restartAppIfNecessary(appID:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_RestartAppIfNecessary", appID) as Boolean;
		}

		/************************/
		/* Stats / Achievements */
		/************************/
		public function requestStats():Boolean {
			return _ExtensionContext.call("AIRSteam_RequestStats") as Boolean;
		}

		public function setAchievement(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetAchievement", name) as Boolean;
		}

		public function clearAchievement(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_ClearAchievement", name) as Boolean;
		}

		public function isAchievement(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_IsAchievement", name) as Boolean;
		}

		public function indicateAchievementProgress(name:String, currentProgress:int, maxProgress:int):Boolean {
			return _ExtensionContext.call("AIRSteam_IndicateAchievementProgress", name, currentProgress, maxProgress) as Boolean;
		}

		public function getStatInt(name:String):int {
			return _ExtensionContext.call("AIRSteam_GetStatInt", name) as int;
		}

		public function getStatFloat(name:String):Number {
			return _ExtensionContext.call("AIRSteam_GetStatFloat", name) as Number;
		}

		public function setStatInt(name:String, value:int):Boolean {
			return _ExtensionContext.call("AIRSteam_SetStatInt", name, value) as Boolean;
		}

		public function setStatFloat(name:String, value:Number):Boolean {
			return _ExtensionContext.call("AIRSteam_SetStatFloat", name, value) as Boolean;
		}

		public function storeStats():Boolean {
			return _ExtensionContext.call("AIRSteam_StoreStats") as Boolean;
		}

		public function resetAllStats(achievementsToo:Boolean):Boolean {
			return _ExtensionContext.call("AIRSteam_ResetAllStats", achievementsToo) as Boolean;
		}

		public function requestGlobalStats(historyDays:int):Boolean {
			return _ExtensionContext.call("AIRSteam_RequestGlobalStats", historyDays) as Boolean;
		}

		public function getGlobalStatInt(name:String):Number {
			return _ExtensionContext.call("AIRSteam_GetGlobalStatInt", name) as Number;
		}

		public function getGlobalStatFloat(name:String):Number {
			return _ExtensionContext.call("AIRSteam_GetGlobalStatFloat", name) as Number;
		}

		public function getGlobalStatHistoryInt(name:String, days:int):Array {
			return _ExtensionContext.call("AIRSteam_GetGlobalStatHistoryInt", name, days) as Array;
		}

		public function getGlobalStatHistoryFloat(name:String, days:int):Array {
			return _ExtensionContext.call("AIRSteam_GetGlobalStatHistoryFloat", name, days) as Array;
		}

		/****************/
		/* Leaderboards */
		/****************/
		public function findLeaderboard(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_FindLeaderboard", name) as Boolean;
		}

		public function findOrCreateLeaderboard(name:String, sortMethod:uint, displayType:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_FindOrCreateLeaderboard", name, sortMethod, displayType) as Boolean;
		}

		public function findLeaderboardResult():String {
			return _ExtensionContext.call("AIRSteam_FindLeaderboardResult") as String;
		}

		public function getLeaderboardName(handle:String):String {
			return _ExtensionContext.call("AIRSteam_GetLeaderboardName", handle) as String;
		}

		public function getLeaderboardEntryCount(handle:String):int {
			return _ExtensionContext.call("AIRSteam_GetLeaderboardEntryCount", handle) as int;
		}

		public function getLeaderboardSortMethod(handle:String):uint {
			return _ExtensionContext.call("AIRSteam_GetLeaderboardSortMethod", handle) as uint;
		}

		public function getLeaderboardDisplayType(handle:String):uint {
			return _ExtensionContext.call("AIRSteam_GetLeaderboardDisplayType", handle) as uint;
		}

		public function uploadLeaderboardScore(handle:String, method:uint, score:int, details:Array = null):Boolean {
			return _ExtensionContext.call("AIRSteam_UploadLeaderboardScore", handle, method, score, details) as Boolean;
		}

		public function uploadLeaderboardScoreResult():UploadLeaderboardScoreResult {
			return _ExtensionContext.call("AIRSteam_UploadLeaderboardScoreResult") as UploadLeaderboardScoreResult;
		}

		public function downloadLeaderboardEntries(handle:String, request:uint = UserStatsConstants.DATAREQUEST_GlobalAroundUser, rangeStart:int = -4, rangeEnd:int = 5):Boolean {
			return _ExtensionContext.call("AIRSteam_DownloadLeaderboardEntries", handle, request, rangeStart, rangeEnd) as Boolean;
		}

		public function downloadLeaderboardEntriesResult(numDetails:int = 0):Array {
			return _ExtensionContext.call("AIRSteam_DownloadLeaderboardEntriesResult", numDetails) as Array;
		}

		/**************************/
		/* Cloud / Remote Storage */
		/**************************/
		public function getFileCount():int {
			return _ExtensionContext.call("AIRSteam_GetFileCount") as int;
		}

		public function getFileSize(name:String):int {
			return _ExtensionContext.call("AIRSteam_GetFileSize", name) as int;
		}

		public function fileExists(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_FileExists", name) as Boolean;
		}

		public function fileWrite(name:String, data:ByteArray):Boolean {
			return _ExtensionContext.call("AIRSteam_FileWrite", name, data) as Boolean;
		}

		public function fileRead(name:String, data:ByteArray):Boolean {
			return _ExtensionContext.call("AIRSteam_FileRead", name, data) as Boolean;
		}

		public function fileDelete(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_FileDelete", name) as Boolean;
		}

		public function fileShare(name:String):Boolean {
			return _ExtensionContext.call("AIRSteam_FileShare", name) as Boolean;
		}

		public function fileShareResult():String {
			return _ExtensionContext.call("AIRSteam_FileShareResult") as String;
		}

		public function isCloudEnabledForApp():Boolean {
			return _ExtensionContext.call("AIRSteam_IsCloudEnabledForApp") as Boolean;
		}

		public function setCloudEnabledForApp(enabled:Boolean):Boolean {
			return _ExtensionContext.call("AIRSteam_SetCloudEnabledForApp", enabled) as Boolean;
		}

		public function getQuota():Array {
			return _ExtensionContext.call("AIRSteam_GetQuota") as Array;
		}

		/******************/
		/* UGC / Workshop */
		/******************/
		public function createQueryUserUGCRequest(userId:String, listType:uint, matchingUGCType:uint, sortOrder:uint, creatorAppId:uint, consumerAppId:uint, page:uint):String {
			return _ExtensionContext.call("AIRSteam_CreateQueryUserUGCRequest", userId, listType, matchingUGCType, sortOrder, creatorAppId, consumerAppId, page) as String;
		}

		public function createQueryAllUGCRequest(queryType:uint, matchingUGCType:uint, creatorAppId:uint, consumerAppId:uint, page:uint):String {
			return _ExtensionContext.call("AIRSteam_CreateQueryAllUGCRequest", queryType, matchingUGCType, creatorAppId, consumerAppId, page) as String;
		}

		public function createQueryUGCDetailsRequest(publishedFileIds:Array):String {
			return _ExtensionContext.call("AIRSteam_CreateQueryUGCDetailsRequest", publishedFileIds) as String;
		}

		public function sendQueryUGCRequest(handle:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SendQueryUGCRequest", handle) as Boolean;
		}

		public function getQueryUGCResult():Array {
			return _ExtensionContext.call("AIRSteam_GetQueryUGCResult") as Array;
		}

		public function createItem(consumerAppId:uint, fileType:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_CreateItem", consumerAppId, fileType) as Boolean;
		}

		public function createItemResult():String {
			return _ExtensionContext.call("AIRSteam_CreateItemResult") as String;
		}

		public function startItemUpdate(consumerAppId:uint, fileId:String):String {
			return _ExtensionContext.call("AIRSteam_StartItemUpdate", consumerAppId, fileId) as String;
		}

		public function setItemTitle(handle:String, title:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemTitle", handle, title) as Boolean;
		}

		public function setItemDescription(handle:String, desc:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemDescription", handle, desc) as Boolean;
		}

		public function setItemUpdateLanguage(handle:String, lang:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemUpdateLanguage", handle, lang) as Boolean;
		}

		public function setItemMetadata(handle:String, metadata:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemMetadata", handle, metadata) as Boolean;
		}

		public function setItemVisibility(handle:String, visibility:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemVisibility", handle, visibility) as Boolean;
		}

		public function setItemTags(handle:String, tags:Array):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemTags", handle, tags) as Boolean;
		}

		public function setItemContent(handle:String, contentFolder:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemContent", handle, contentFolder) as Boolean;
		}

		public function setItemPreview(handle:String, previewPath:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetItemPreview", handle, previewPath) as Boolean;
		}

		public function addItemKeyValueTag(handle:String, key:String, value:String):Boolean {
			return _ExtensionContext.call("AIRSteam_AddItemKeyValueTag", handle, key, value) as Boolean;
		}

		public function removeItemKeyValueTags(handle:String, key:String):Boolean {
			return _ExtensionContext.call("AIRSteam_RemoveItemKeyValueTags", handle, key) as Boolean;
		}

		public function submitItemUpdate(handle:String, changeNote:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SubmitItemUpdate", handle, changeNote) as Boolean;
		}

		public function subscribeItem(publishedFileId:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SubscribeItem", publishedFileId) as Boolean;
		}

		public function unsubscribeItem(publishedFileId:String):Boolean {
			return _ExtensionContext.call("AIRSteam_UnsubscribeItem", publishedFileId) as Boolean;
		}

		public function getSubscribedItems():Array {
			return _ExtensionContext.call("AIRSteam_GetSubscribedItems") as Array;
		}

		public function getItemState(publishedFileId:String):uint {
			return _ExtensionContext.call("AIRSteam_GetItemState", publishedFileId) as uint;
		}

		public function getItemInstallInfo(publishedFileId:String):UGCItemInstallInfo {
			return _ExtensionContext.call("AIRSteam_GetItemInstallInfo", publishedFileId) as UGCItemInstallInfo;
		}

		public function getItemDownloadInfo(publishedFileId:String):Array {
			return _ExtensionContext.call("AIRSteam_GetItemDownloadInfo", publishedFileId) as Array;
		}

		public function downloadItem(publishedFileId:String, highPriority:Boolean):Boolean {
			return _ExtensionContext.call("AIRSteam_DownloadItem", publishedFileId, highPriority) as Boolean;
		}

		/***********/
		/* Friends */
		/***********/
		public function getFriendCount(flags:uint):int {
			return _ExtensionContext.call("AIRSteam_GetFriendCount", flags) as int;
		}

		public function getFriendByIndex(index:int, flags:uint):String {
			return _ExtensionContext.call("AIRSteam_GetFriendByIndex", index, flags) as String;
		}

		public function getFriendPersonaName(id:String):String {
			return _ExtensionContext.call("AIRSteam_GetFriendPersonaName", id) as String;
		}

		/******************************/
		/* Authentication & Ownership */
		/******************************/
		public function getAuthSessionTicket(ticket:ByteArray):uint {
			return _ExtensionContext.call("AIRSteam_GetAuthSessionTicket", ticket) as uint;
		}

		public function getAuthSessionTicketResult():uint {
			return _ExtensionContext.call("AIRSteam_GetAuthSessionTicketResult") as uint;
		}

		public function beginAuthSession(ticket:ByteArray, steamID:String):int {
			return _ExtensionContext.call("AIRSteam_BeginAuthSession", ticket, steamID) as int;
		}

		public function endAuthSession(steamID:String):Boolean {
			return _ExtensionContext.call("AIRSteam_EndAuthSession", steamID) as Boolean;
		}

		public function cancelAuthTicket(ticketHandle:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_CancelAuthTicket", ticketHandle) as Boolean;
		}

		public function userHasLicenseForApp(steamID:String, appID:uint):int {
			return _ExtensionContext.call("AIRSteam_UserHasLicenseForApp", steamID, appID) as int;
		}

		/***********/
		/* Overlay */
		/***********/
		public function activateGameOverlay(dialog:String):Boolean {
			return _ExtensionContext.call("AIRSteam_ActivateGameOverlay", dialog) as Boolean;
		}

		public function activateGameOverlayToUser(dialog:String, steamId:String):Boolean {
			return _ExtensionContext.call("AIRSteam_ActivateGameOverlayToUser", dialog, steamId) as Boolean;
		}

		public function activateGameOverlayToWebPage(url:String):Boolean {
			return _ExtensionContext.call("AIRSteam_ActivateGameOverlayToWebPage", url) as Boolean;
		}

		public function activateGameOverlayToStore(appId:uint, flag:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_ActivateGameOverlayToStore", appId, flag) as Boolean;
		}

		public function activateGameOverlayInviteDialog(steamIdLobby:String):Boolean {
			return _ExtensionContext.call("AIRSteam_ActivateGameOverlayInviteDialog", steamIdLobby) as Boolean;
		}

		public function isOverlayEnabled():Boolean {
			return _ExtensionContext.call("AIRSteam_IsOverlayEnabled") as Boolean;
		}

		public function setOverlayNotificationPosition(position:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_SetOverlayNotificationPosition", position) as Boolean;
		}

		/***********************/
		/* DLC / subscriptions */
		/***********************/
		public function isSubscribedApp(appId:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_IsSubscribedApp", appId) as Boolean;
		}

		public function isDLCInstalled(appId:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_IsDLCInstalled", appId) as Boolean;
		}

		public function getDLCCount():int {
			return _ExtensionContext.call("AIRSteam_GetDLCCount") as int;
		}

		public function installDLC(appId:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_InstallDLC", appId) as Boolean;
		}

		public function uninstallDLC(appId:uint):Boolean {
			return _ExtensionContext.call("AIRSteam_UninstallDLC", appId) as Boolean;
		}

		public function DLCInstalledResult():uint {
			return _ExtensionContext.call("AIRSteam_DLCInstalledResult") as uint;
		}

		/********************/
		/* Microtransaction */
		/********************/
		public function microTxnResult():MicroTxnAuthorizationResponse {
			return _ExtensionContext.call("AIRSteam_MicroTxnResult") as MicroTxnAuthorizationResponse;
		}

		/**********************************/
		/* Other non-Steamworks functions */
		/**********************************/
		public function getEnv(name:String):String {
			return _ExtensionContext.call("AIRSteam_GetEnv", name) as String;
		}

		public function setEnv(name:String, value:String):Boolean {
			return _ExtensionContext.call("AIRSteam_SetEnv", name, value) as Boolean;
		}

		// END GENERATED CODE
	}
}
